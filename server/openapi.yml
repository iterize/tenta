openapi: 3.0.2
info:
  title: Tenta
  description: |
    Tenta is a remote and real-time management system for distributed sensor networks. It allows you to collect and store data from your sensors, and supervise and configure them remotely from anywhere in the world.

    This documentation describes Tenta's REST API. In most cases, you won't need to call these endpoints directly, as the dashboard provides a user-friendly interface. However, you might use this API to integrate Tenta with your own systems or to automate certain tasks.
  version: "0.1"
servers:
  - url: "https://sea-turtle-app-38sco.ondigitalocean.app"
tags:
  - name: Status
  - name: Users
  - name: Networks
  - name: Sensors
  - name: Measurements
  - name: Logs
paths:
  "/status":
    get:
      tags: [Status]
      summary: Read server status
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  environment:
                    type: string
                    example: production
                  commit_sha:
                    type: string
                    example: 1a2984bf5ffda71207fb133d785eb486cb465618
                  branch_name:
                    type: string
                    example: main
                  start_timestamp:
                    $ref: "#/components/schemas/timestamp"
  "/users":
    post:
      tags: [Users]
      summary: Create user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  $ref: "#/components/schemas/name"
                password:
                  $ref: "#/components/schemas/password"
              required:
                - user_name
                - password
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    $ref: "#/components/schemas/token"
                  user_identifier:
                    $ref: "#/components/schemas/identifier"
        "409":
          $ref: "#/components/responses/409"
  "/authentication":
    post:
      tags: [Users]
      summary: Authenticate
      description: |
        Authenticate a user from a username and password and return an access token. Use this access token in all requests to protected routes.

        The access token is valid indefinitely.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  $ref: "#/components/schemas/name"
                password:
                  $ref: "#/components/schemas/password"
              required:
                - user_name
                - password
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    $ref: "#/components/schemas/token"
                  user_identifier:
                    $ref: "#/components/schemas/identifier"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  "/networks":
    post:
      tags: [Networks]
      summary: Create network
      security:
        - "Bearer token": []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                network_name:
                  $ref: "#/components/schemas/name"
              required:
                - network_name
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  network_identifier:
                    $ref: "#/components/schemas/identifier"
        "401":
          $ref: "#/components/responses/401"
        "409":
          $ref: "#/components/responses/409"
    get:
      tags: [Networks]
      summary: Read networks
      security:
        - "Bearer token": []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    network_identifier:
                      $ref: "#/components/schemas/identifier"
                    network_name:
                      $ref: "#/components/schemas/name"
        "401":
          $ref: "#/components/responses/401"
  "/networks/{network_identifier}":
    get:
      tags: [Networks]
      summary: Read network
      parameters:
        - $ref: "#/components/parameters/network_identifier"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    sensor_identifier:
                      $ref: "#/components/schemas/identifier"
                    sensor_name:
                      $ref: "#/components/schemas/name"
                    bucket_timestamps:
                      type: array
                      items:
                        $ref: "#/components/schemas/timestamp"
                    measurement_counts:
                      type: array
                      items:
                        type: integer
  "/networks/{network_identifier}/sensors":
    post:
      tags: [Sensors]
      summary: Create sensor
      security:
        - "Bearer token": []
      parameters:
        - $ref: "#/components/parameters/network_identifier"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sensor_name:
                  $ref: "#/components/schemas/name"
              required:
                - sensor_name
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  sensor_identifier:
                    $ref: "#/components/schemas/identifier"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
  "/networks/{network_identifier}/sensors/{sensor_identifier}":
    put:
      tags: [Sensors]
      summary: Update sensor
      security:
        - "Bearer token": []
      parameters:
        - $ref: "#/components/parameters/network_identifier"
        - $ref: "#/components/parameters/sensor_identifier"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sensor_name:
                  $ref: "#/components/schemas/name"
              required:
                - sensor_name
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
  "/networks/{network_identifier}/sensors/{sensor_identifier}/configurations":
    post:
      tags: [Sensors]
      summary: Create configuration
      description: |
        Create or update a sensor's configuration. Each configuration is assigned a monotonically increasing `revision` number. The new configuration is stored in the database and relayed to the sensor over MQTT.

        Configurations are an optional feature. Sensors don't need to implement configuration updates and can nevertheless send measurements and logs unidirectionally to the server.
      security:
        - "Bearer token": []
      parameters:
        - $ref: "#/components/parameters/network_identifier"
        - $ref: "#/components/parameters/sensor_identifier"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/configuration"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  revision:
                    $ref: "#/components/schemas/revision"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
    get:
      tags: [Sensors]
      summary: Read configurations
      description: "Return a sensor's configurations in pages of 64 elements sorted ascendingly by `revision`."
      parameters:
        - $ref: "#/components/parameters/network_identifier"
        - $ref: "#/components/parameters/sensor_identifier"
        - $ref: "#/components/parameters/direction"
        - $ref: "#/components/parameters/revision"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    value:
                      $ref: "#/components/schemas/configuration"
                    revision:
                      $ref: "#/components/schemas/revision"
                    creation_timestamp:
                      $ref: "#/components/schemas/timestamp"
                    publication_timestamp:
                      $ref: "#/components/schemas/timestamp"
                    acknowledgment_timestamp:
                      $ref: "#/components/schemas/timestamp"
                    receipt_timestamp:
                      $ref: "#/components/schemas/timestamp"
                    success:
                      type: boolean
  "/networks/{network_identifier}/sensors/{sensor_identifier}/measurements":
    get:
      tags: [Measurements]
      summary: Read measurements
      description: "Return a sensor's measurements in pages of 64 elements sorted ascendingly by `creation_timestamp`."
      parameters:
        - $ref: "#/components/parameters/network_identifier"
        - $ref: "#/components/parameters/sensor_identifier"
        - $ref: "#/components/parameters/direction"
        - $ref: "#/components/parameters/creation_timestamp"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    value:
                      $ref: "#/components/schemas/measurement"
                    revision:
                      $ref: "#/components/schemas/revision"
                    creation_timestamp:
                      $ref: "#/components/schemas/timestamp"
  "/networks/{network_identifier}/sensors/{sensor_identifier}/logs":
    get:
      tags: [Logs]
      summary: Read logs
      description: "Return a sensor's logs in pages of 64 elements sorted ascendingly by `creation_timestamp`."
      parameters:
        - $ref: "#/components/parameters/network_identifier"
        - $ref: "#/components/parameters/sensor_identifier"
        - $ref: "#/components/parameters/direction"
        - $ref: "#/components/parameters/creation_timestamp"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    severity:
                      $ref: "#/components/schemas/severity"
                    message:
                      $ref: "#/components/schemas/message"
                    revision:
                      $ref: "#/components/schemas/revision"
                    creation_timestamp:
                      $ref: "#/components/schemas/timestamp"
  "/networks/{network_identifier}/sensors/{sensor_identifier}/logs/aggregates":
    get:
      tags: [Logs]
      summary: Read logs aggregation
      description: "Read an aggregation of a sensor's logs that have a severity of warning or error."
      parameters:
        - $ref: "#/components/parameters/network_identifier"
        - $ref: "#/components/parameters/sensor_identifier"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    severity:
                      $ref: "#/components/schemas/severity"
                    message:
                      $ref: "#/components/schemas/message"
                    min_revision:
                      $ref: "#/components/schemas/revision"
                    max_revision:
                      $ref: "#/components/schemas/revision"
                    min_creation_timestamp:
                      $ref: "#/components/schemas/timestamp"
                    max_creation_timestamp:
                      $ref: "#/components/schemas/timestamp"
                    count:
                      $ref: "#/components/schemas/count"
components:
  securitySchemes:
    "Bearer token":
      type: http
      scheme: bearer
  responses:
    401:
      description: Unauthorized
    403:
      description: Forbidden
    404:
      description: Not Found
    409:
      description: Conflict
  schemas:
    identifier:
      type: string
      example: 575a7328-4e2e-4b88-afcc-e0b5ed3920cc
      pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}$"
    token:
      type: string
      example: c59805ae394cceea937163877ca31375183650586137170a69652b6d8543e869
      pattern: "^[0-9a-f]{64}$"
    timestamp:
      type: number
      example: 1683644500.3
    name:
      description: "The regex means: lowercase letters and numbers, separated by dashes, with no leading, trailing, or double dashes."
      type: string
      example: happy-un1c0rn
      pattern: "^[a-z0-9](-?[a-z0-9])*$"
      maxLength: 64
    password:
      type: string
      example: "12345678"
      minLength: 8
      maxLength: 256
    configuration:
      description: "Configurations are JSON objects that are relayed to the sensors over MQTT. Sensors are expected to validate the configurations they receive and respond with positive or negative acknowledgments."
      type: object
      example:
        measurement_interval: 8.5
        cache: true
        technique: "default"
    revision:
      description: "Configurations are assigned monotonically increasing revision numbers. The revision is used as an identifier in the communication with the sensors and can clearly match configurations to measurements and logs."
      type: integer
    measurement:
      type: object
      example:
        temperature: 23.1
        humidity: 0.62
    severity:
      type: string
      enum: [info, warning, error]
      example: warning
    message:
      type: string
      example: "The CPU is toasty; Get the marshmallows ready!"
    count:
      type: integer
      minimum: 0
    authorization:
      type: string
      example: Bearer c59805ae394cceea937163877ca31375183650586137170a69652b6d8543e869
      pattern: "^Bearer [0-9a-f]{64}$"
  parameters:
    network_identifier:
      name: network_identifier
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/identifier"
    sensor_identifier:
      name: sensor_identifier
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/identifier"
    revision:
      name: revision
      description: "The cursor of the query. Depending on the direction, the request returns the next or previous elements. The element the cursor references is excluded from the result."
      in: query
      schema:
        $ref: "#/components/schemas/revision"
    creation_timestamp:
      name: creation_timestamp
      description: "The cursor of the query. Depending on the direction, the request returns the next or previous elements. The element the cursor references is excluded from the result."
      in: query
      schema:
        $ref: "#/components/schemas/timestamp"
    direction:
      name: direction
      description: "The direction of the page based on the cursor. If no cursor is provided, `next` returns the first page and `previous` returns the last page."
      in: query
      schema:
        type: string
        enum: [next, previous]
        default: next
